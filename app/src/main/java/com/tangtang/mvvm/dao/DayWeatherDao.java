package com.tangtang.mvvm.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tangtang.mvvm.utils.StringConverter;
import java.util.List;

import com.tangtang.mvvm.entity.DayWeather;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAY_WEATHER".
*/
public class DayWeatherDao extends AbstractDao<DayWeather, Void> {

    public static final String TABLENAME = "DAY_WEATHER";

    /**
     * Properties of entity DayWeather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Tem = new Property(0, String.class, "tem", false, "TEM");
        public final static Property Tem1 = new Property(1, String.class, "tem1", false, "TEM1");
        public final static Property Tem2 = new Property(2, String.class, "tem2", false, "TEM2");
        public final static Property Wea = new Property(3, String.class, "wea", false, "WEA");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property Week = new Property(5, String.class, "week", false, "WEEK");
        public final static Property WinSpeed = new Property(6, String.class, "winSpeed", false, "WIN_SPEED");
        public final static Property WeaDay = new Property(7, String.class, "weaDay", false, "WEA_DAY");
        public final static Property WeaNight = new Property(8, String.class, "weaNight", false, "WEA_NIGHT");
        public final static Property Win = new Property(9, String.class, "win", false, "WIN");
        public final static Property City = new Property(10, String.class, "city", false, "CITY");
    }

    private final StringConverter winConverter = new StringConverter();

    public DayWeatherDao(DaoConfig config) {
        super(config);
    }
    
    public DayWeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAY_WEATHER\" (" + //
                "\"TEM\" TEXT," + // 0: tem
                "\"TEM1\" TEXT," + // 1: tem1
                "\"TEM2\" TEXT," + // 2: tem2
                "\"WEA\" TEXT," + // 3: wea
                "\"DATE\" TEXT," + // 4: date
                "\"WEEK\" TEXT," + // 5: week
                "\"WIN_SPEED\" TEXT," + // 6: winSpeed
                "\"WEA_DAY\" TEXT," + // 7: weaDay
                "\"WEA_NIGHT\" TEXT," + // 8: weaNight
                "\"WIN\" TEXT," + // 9: win
                "\"CITY\" TEXT);"); // 10: city
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAY_WEATHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DayWeather entity) {
        stmt.clearBindings();
 
        String tem = entity.getTem();
        if (tem != null) {
            stmt.bindString(1, tem);
        }
 
        String tem1 = entity.getTem1();
        if (tem1 != null) {
            stmt.bindString(2, tem1);
        }
 
        String tem2 = entity.getTem2();
        if (tem2 != null) {
            stmt.bindString(3, tem2);
        }
 
        String wea = entity.getWea();
        if (wea != null) {
            stmt.bindString(4, wea);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(6, week);
        }
 
        String winSpeed = entity.getWinSpeed();
        if (winSpeed != null) {
            stmt.bindString(7, winSpeed);
        }
 
        String weaDay = entity.getWeaDay();
        if (weaDay != null) {
            stmt.bindString(8, weaDay);
        }
 
        String weaNight = entity.getWeaNight();
        if (weaNight != null) {
            stmt.bindString(9, weaNight);
        }
 
        List win = entity.getWin();
        if (win != null) {
            stmt.bindString(10, winConverter.convertToDatabaseValue(win));
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(11, city);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DayWeather entity) {
        stmt.clearBindings();
 
        String tem = entity.getTem();
        if (tem != null) {
            stmt.bindString(1, tem);
        }
 
        String tem1 = entity.getTem1();
        if (tem1 != null) {
            stmt.bindString(2, tem1);
        }
 
        String tem2 = entity.getTem2();
        if (tem2 != null) {
            stmt.bindString(3, tem2);
        }
 
        String wea = entity.getWea();
        if (wea != null) {
            stmt.bindString(4, wea);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(6, week);
        }
 
        String winSpeed = entity.getWinSpeed();
        if (winSpeed != null) {
            stmt.bindString(7, winSpeed);
        }
 
        String weaDay = entity.getWeaDay();
        if (weaDay != null) {
            stmt.bindString(8, weaDay);
        }
 
        String weaNight = entity.getWeaNight();
        if (weaNight != null) {
            stmt.bindString(9, weaNight);
        }
 
        List win = entity.getWin();
        if (win != null) {
            stmt.bindString(10, winConverter.convertToDatabaseValue(win));
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(11, city);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DayWeather readEntity(Cursor cursor, int offset) {
        DayWeather entity = new DayWeather( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tem
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tem1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tem2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // wea
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // week
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // winSpeed
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // weaDay
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // weaNight
            cursor.isNull(offset + 9) ? null : winConverter.convertToEntityProperty(cursor.getString(offset + 9)), // win
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // city
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DayWeather entity, int offset) {
        entity.setTem(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTem1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTem2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWea(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWeek(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWinSpeed(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeaDay(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWeaNight(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWin(cursor.isNull(offset + 9) ? null : winConverter.convertToEntityProperty(cursor.getString(offset + 9)));
        entity.setCity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DayWeather entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DayWeather entity) {
        return null;
    }

    @Override
    public boolean hasKey(DayWeather entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
